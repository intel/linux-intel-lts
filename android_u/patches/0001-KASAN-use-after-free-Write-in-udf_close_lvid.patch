From 92bdac0e8cf6f71b1d0031c348d77caee887e7cd Mon Sep 17 00:00:00 2001
From: Jan Kara <jack@suse.cz>
Date: Tue, 25 Jul 2023 13:58:07 +0000
Subject: [PATCH] KASAN: use-after-free Write in udf_close_lvid

CPU: 1 PID: 3615 Comm: syz-executor234 Not tainted 5.18.0-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x1e3/0x2cb lib/dump_stack.c:106
 print_address_description+0x65/0x4b0 mm/kasan/report.c:313
 print_report+0xf4/0x210 mm/kasan/report.c:429
 kasan_report+0xfb/0x130 mm/kasan/report.c:491
 udf_close_lvid+0x68a/0x980 fs/udf/super.c:2072
 udf_fill_super+0xde8/0x1b20 fs/udf/super.c:2309
 mount_bdev+0x26c/0x3a0 fs/super.c:1367
 legacy_get_tree+0xea/0x180 fs/fs_context.c:610
 vfs_get_tree+0x88/0x270 fs/super.c:1497
 do_new_mount+0x289/0xad0 fs/namespace.c:3040
 do_mount fs/namespace.c:3383 [inline]
 __do_sys_mount fs/namespace.c:3591 [inline]
 __se_sys_mount+0x2e3/0x3d0 fs/namespace.c:3568
 do_syscall_x64 arch/x86/entry/common.c:50 [inline]
 do_syscall_64+0x2b/0x70 arch/x86/entry/common.c:80
 entry_SYSCALL_64_after_hwframe+0x44/0xae
RIP: 0033:0x7fd64e59b08a
Code: 48 c7 c2 b8 ff ff ff f7 d8 64 89 02 b8 ff ff ff ff eb d2 e8 a8 00 00 00 0f 1f 84 00 00 00 00 00 49 89 ca b8 a5 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
RSP: 002b:00007fd64e546168 EFLAGS: 00000286 ORIG_RAX: 00000000000000a5
RAX: ffffffffffffffda RBX: 00007fd64e5461c0 RCX: 00007fd64e59b08a
RDX: 0000000020000000 RSI: 0000000020000700 RDI: 00007fd64e546180
RBP: 000000000000000e R08: 00007fd64e5461c0 R09: 00007fd64e5466b8
R10: 0000000000000810 R11: 0000000000000286 R12: 00007fd64e546180
R13: 0000000020000350 R14: 0000000000000003 R15: 0000000000000004
 </TASK>
---
 fs/udf/super.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/fs/udf/super.c b/fs/udf/super.c
index 6b85c66722d3..d4f2093668ab 100644
--- a/fs/udf/super.c
+++ b/fs/udf/super.c
@@ -108,6 +108,19 @@ struct logicalVolIntegrityDescImpUse *udf_sb_lvidiu(struct super_block *sb)
 	if (!UDF_SB(sb)->s_lvid_bh)
 		return NULL;
 	lvid = (struct logicalVolIntegrityDesc *)UDF_SB(sb)->s_lvid_bh->b_data;
+	do {
+		u32 parts, impuselen;
+
+		parts = le32_to_cpu(lvid->numOfPartitions);
+		impuselen = le32_to_cpu(lvid->lengthOfImpUse);
+
+		if (parts >= sb->s_blocksize ||
+		    impuselen >= sb->s_blocksize ||
+		    sizeof(struct logicalVolIntegrityDesc) +
+		    impuselen + 2 * parts * sizeof(u32) > sb->s_blocksize)
+			return NULL;
+	} while (0);
+
 	partnum = le32_to_cpu(lvid->numOfPartitions);
 	/* The offset is to skip freeSpaceTable and sizeTable arrays */
 	offset = partnum * 2 * sizeof(uint32_t);
-- 
2.25.1

